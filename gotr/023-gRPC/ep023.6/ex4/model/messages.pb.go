// Code generated by protoc-gen-go. DO NOT EDIT.
// source: messages.proto

package model

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type MathRequest struct {
	Operand1             int64    `protobuf:"varint,1,opt,name=operand1,proto3" json:"operand1,omitempty"`
	Operand2             int64    `protobuf:"varint,2,opt,name=operand2,proto3" json:"operand2,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *MathRequest) Reset()         { *m = MathRequest{} }
func (m *MathRequest) String() string { return proto.CompactTextString(m) }
func (*MathRequest) ProtoMessage()    {}
func (*MathRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_4dc296cbfe5ffcd5, []int{0}
}

func (m *MathRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MathRequest.Unmarshal(m, b)
}
func (m *MathRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MathRequest.Marshal(b, m, deterministic)
}
func (m *MathRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MathRequest.Merge(m, src)
}
func (m *MathRequest) XXX_Size() int {
	return xxx_messageInfo_MathRequest.Size(m)
}
func (m *MathRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_MathRequest.DiscardUnknown(m)
}

var xxx_messageInfo_MathRequest proto.InternalMessageInfo

func (m *MathRequest) GetOperand1() int64 {
	if m != nil {
		return m.Operand1
	}
	return 0
}

func (m *MathRequest) GetOperand2() int64 {
	if m != nil {
		return m.Operand2
	}
	return 0
}

type MathResponse struct {
	Result               int64    `protobuf:"varint,1,opt,name=result,proto3" json:"result,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *MathResponse) Reset()         { *m = MathResponse{} }
func (m *MathResponse) String() string { return proto.CompactTextString(m) }
func (*MathResponse) ProtoMessage()    {}
func (*MathResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_4dc296cbfe5ffcd5, []int{1}
}

func (m *MathResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MathResponse.Unmarshal(m, b)
}
func (m *MathResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MathResponse.Marshal(b, m, deterministic)
}
func (m *MathResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MathResponse.Merge(m, src)
}
func (m *MathResponse) XXX_Size() int {
	return xxx_messageInfo_MathResponse.Size(m)
}
func (m *MathResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MathResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MathResponse proto.InternalMessageInfo

func (m *MathResponse) GetResult() int64 {
	if m != nil {
		return m.Result
	}
	return 0
}

type SumRequest struct {
	Value                int64    `protobuf:"varint,1,opt,name=value,proto3" json:"value,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SumRequest) Reset()         { *m = SumRequest{} }
func (m *SumRequest) String() string { return proto.CompactTextString(m) }
func (*SumRequest) ProtoMessage()    {}
func (*SumRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_4dc296cbfe5ffcd5, []int{2}
}

func (m *SumRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SumRequest.Unmarshal(m, b)
}
func (m *SumRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SumRequest.Marshal(b, m, deterministic)
}
func (m *SumRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SumRequest.Merge(m, src)
}
func (m *SumRequest) XXX_Size() int {
	return xxx_messageInfo_SumRequest.Size(m)
}
func (m *SumRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_SumRequest.DiscardUnknown(m)
}

var xxx_messageInfo_SumRequest proto.InternalMessageInfo

func (m *SumRequest) GetValue() int64 {
	if m != nil {
		return m.Value
	}
	return 0
}

type SumResponse struct {
	Total                int64    `protobuf:"varint,1,opt,name=total,proto3" json:"total,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SumResponse) Reset()         { *m = SumResponse{} }
func (m *SumResponse) String() string { return proto.CompactTextString(m) }
func (*SumResponse) ProtoMessage()    {}
func (*SumResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_4dc296cbfe5ffcd5, []int{3}
}

func (m *SumResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SumResponse.Unmarshal(m, b)
}
func (m *SumResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SumResponse.Marshal(b, m, deterministic)
}
func (m *SumResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SumResponse.Merge(m, src)
}
func (m *SumResponse) XXX_Size() int {
	return xxx_messageInfo_SumResponse.Size(m)
}
func (m *SumResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_SumResponse.DiscardUnknown(m)
}

var xxx_messageInfo_SumResponse proto.InternalMessageInfo

func (m *SumResponse) GetTotal() int64 {
	if m != nil {
		return m.Total
	}
	return 0
}

type RandomRequest struct {
	Count                int32    `protobuf:"varint,1,opt,name=count,proto3" json:"count,omitempty"`
	Bounded              bool     `protobuf:"varint,2,opt,name=bounded,proto3" json:"bounded,omitempty"`
	MinValue             int64    `protobuf:"varint,3,opt,name=minValue,proto3" json:"minValue,omitempty"`
	MaxValue             int64    `protobuf:"varint,4,opt,name=maxValue,proto3" json:"maxValue,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RandomRequest) Reset()         { *m = RandomRequest{} }
func (m *RandomRequest) String() string { return proto.CompactTextString(m) }
func (*RandomRequest) ProtoMessage()    {}
func (*RandomRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_4dc296cbfe5ffcd5, []int{4}
}

func (m *RandomRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RandomRequest.Unmarshal(m, b)
}
func (m *RandomRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RandomRequest.Marshal(b, m, deterministic)
}
func (m *RandomRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RandomRequest.Merge(m, src)
}
func (m *RandomRequest) XXX_Size() int {
	return xxx_messageInfo_RandomRequest.Size(m)
}
func (m *RandomRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_RandomRequest.DiscardUnknown(m)
}

var xxx_messageInfo_RandomRequest proto.InternalMessageInfo

func (m *RandomRequest) GetCount() int32 {
	if m != nil {
		return m.Count
	}
	return 0
}

func (m *RandomRequest) GetBounded() bool {
	if m != nil {
		return m.Bounded
	}
	return false
}

func (m *RandomRequest) GetMinValue() int64 {
	if m != nil {
		return m.MinValue
	}
	return 0
}

func (m *RandomRequest) GetMaxValue() int64 {
	if m != nil {
		return m.MaxValue
	}
	return 0
}

type RandomResponse struct {
	Value                int64    `protobuf:"varint,1,opt,name=value,proto3" json:"value,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RandomResponse) Reset()         { *m = RandomResponse{} }
func (m *RandomResponse) String() string { return proto.CompactTextString(m) }
func (*RandomResponse) ProtoMessage()    {}
func (*RandomResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_4dc296cbfe5ffcd5, []int{5}
}

func (m *RandomResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RandomResponse.Unmarshal(m, b)
}
func (m *RandomResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RandomResponse.Marshal(b, m, deterministic)
}
func (m *RandomResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RandomResponse.Merge(m, src)
}
func (m *RandomResponse) XXX_Size() int {
	return xxx_messageInfo_RandomResponse.Size(m)
}
func (m *RandomResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_RandomResponse.DiscardUnknown(m)
}

var xxx_messageInfo_RandomResponse proto.InternalMessageInfo

func (m *RandomResponse) GetValue() int64 {
	if m != nil {
		return m.Value
	}
	return 0
}

func init() {
	proto.RegisterType((*MathRequest)(nil), "model.MathRequest")
	proto.RegisterType((*MathResponse)(nil), "model.MathResponse")
	proto.RegisterType((*SumRequest)(nil), "model.SumRequest")
	proto.RegisterType((*SumResponse)(nil), "model.SumResponse")
	proto.RegisterType((*RandomRequest)(nil), "model.RandomRequest")
	proto.RegisterType((*RandomResponse)(nil), "model.RandomResponse")
}

func init() { proto.RegisterFile("messages.proto", fileDescriptor_4dc296cbfe5ffcd5) }

var fileDescriptor_4dc296cbfe5ffcd5 = []byte{
	// 322 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x52, 0xbf, 0x4f, 0xf3, 0x30,
	0x14, 0x54, 0xbe, 0x7c, 0x29, 0xd5, 0x2b, 0xad, 0x84, 0x29, 0xa8, 0xca, 0x84, 0x8c, 0x54, 0x75,
	0x8a, 0x20, 0x0c, 0xcc, 0x48, 0x65, 0xec, 0x92, 0x4a, 0xec, 0x6e, 0xfd, 0x04, 0x95, 0x12, 0xbb,
	0xc4, 0x76, 0x80, 0xbf, 0x1e, 0x54, 0xff, 0xa0, 0x09, 0x2c, 0x64, 0xbc, 0x77, 0xa7, 0x7b, 0xef,
	0xce, 0x86, 0x49, 0x85, 0x4a, 0xb1, 0x67, 0x54, 0xd9, 0xbe, 0x96, 0x5a, 0x92, 0xa4, 0x92, 0x1c,
	0x4b, 0xfa, 0x08, 0xa3, 0x15, 0xd3, 0x2f, 0x05, 0xbe, 0x1a, 0x54, 0x9a, 0xa4, 0x30, 0x94, 0x7b,
	0xac, 0x99, 0xe0, 0xb7, 0xb3, 0xe8, 0x2a, 0x5a, 0xc4, 0xc5, 0x37, 0x6e, 0x71, 0xf9, 0xec, 0x5f,
	0x87, 0xcb, 0xe9, 0x1c, 0x4e, 0x9d, 0x8d, 0xda, 0x4b, 0xa1, 0x90, 0x5c, 0xc2, 0xa0, 0x46, 0x65,
	0x4a, 0xed, 0x5d, 0x3c, 0xa2, 0x14, 0x60, 0x6d, 0xaa, 0xb0, 0x6d, 0x0a, 0x49, 0xc3, 0x4a, 0x83,
	0x5e, 0xe4, 0x00, 0xbd, 0x86, 0x91, 0xd5, 0x78, 0xab, 0x29, 0x24, 0x5a, 0x6a, 0x56, 0x06, 0x91,
	0x05, 0xf4, 0x0d, 0xc6, 0x05, 0x13, 0x5c, 0xb6, 0xbd, 0xb6, 0xd2, 0x08, 0xb7, 0x30, 0x29, 0x1c,
	0x20, 0x33, 0x38, 0xd9, 0x48, 0x23, 0x38, 0x72, 0x7b, 0xf2, 0xb0, 0x08, 0xf0, 0x90, 0xa6, 0xda,
	0x89, 0x27, 0xbb, 0x3e, 0x76, 0x69, 0x02, 0xb6, 0x1c, 0x7b, 0x77, 0xdc, 0x7f, 0xcf, 0x79, 0x4c,
	0xe7, 0x30, 0x09, 0x8b, 0x8f, 0x07, 0xfe, 0x4e, 0x91, 0x7f, 0x46, 0x30, 0x5e, 0x7d, 0x1c, 0x4a,
	0x59, 0x63, 0xdd, 0xec, 0xb6, 0x48, 0x32, 0x88, 0x1f, 0x38, 0x27, 0x24, 0xb3, 0xcd, 0x67, 0xad,
	0xda, 0xd3, 0xf3, 0xce, 0xcc, 0xfb, 0x66, 0x10, 0xaf, 0xcd, 0xa6, 0x97, 0x7e, 0x65, 0xca, 0x5e,
	0xfa, 0xe5, 0xae, 0xe9, 0xe7, 0x2f, 0xff, 0x7e, 0x7f, 0xde, 0xc0, 0x68, 0xc9, 0x34, 0x0b, 0xf1,
	0xef, 0x61, 0xe0, 0x8a, 0x23, 0x53, 0xaf, 0xee, 0x3c, 0x60, 0x7a, 0xf1, 0x63, 0xea, 0x5c, 0x6e,
	0x22, 0xd7, 0x43, 0x45, 0xce, 0x3c, 0x7f, 0xfc, 0x3f, 0x29, 0x69, 0x8f, 0x9c, 0x7e, 0x11, 0x6d,
	0x06, 0xf6, 0x83, 0xdf, 0x7d, 0x05, 0x00, 0x00, 0xff, 0xff, 0x76, 0xaa, 0x14, 0xf0, 0xf2, 0x02,
	0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// MyMathServiceClient is the client API for MyMathService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type MyMathServiceClient interface {
	Add(ctx context.Context, in *MathRequest, opts ...grpc.CallOption) (*MathResponse, error)
	Sub(ctx context.Context, in *MathRequest, opts ...grpc.CallOption) (*MathResponse, error)
	Mul(ctx context.Context, in *MathRequest, opts ...grpc.CallOption) (*MathResponse, error)
	Div(ctx context.Context, in *MathRequest, opts ...grpc.CallOption) (*MathResponse, error)
	Mod(ctx context.Context, in *MathRequest, opts ...grpc.CallOption) (*MathResponse, error)
}

type myMathServiceClient struct {
	cc *grpc.ClientConn
}

func NewMyMathServiceClient(cc *grpc.ClientConn) MyMathServiceClient {
	return &myMathServiceClient{cc}
}

func (c *myMathServiceClient) Add(ctx context.Context, in *MathRequest, opts ...grpc.CallOption) (*MathResponse, error) {
	out := new(MathResponse)
	err := c.cc.Invoke(ctx, "/model.MyMathService/Add", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *myMathServiceClient) Sub(ctx context.Context, in *MathRequest, opts ...grpc.CallOption) (*MathResponse, error) {
	out := new(MathResponse)
	err := c.cc.Invoke(ctx, "/model.MyMathService/Sub", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *myMathServiceClient) Mul(ctx context.Context, in *MathRequest, opts ...grpc.CallOption) (*MathResponse, error) {
	out := new(MathResponse)
	err := c.cc.Invoke(ctx, "/model.MyMathService/Mul", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *myMathServiceClient) Div(ctx context.Context, in *MathRequest, opts ...grpc.CallOption) (*MathResponse, error) {
	out := new(MathResponse)
	err := c.cc.Invoke(ctx, "/model.MyMathService/Div", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *myMathServiceClient) Mod(ctx context.Context, in *MathRequest, opts ...grpc.CallOption) (*MathResponse, error) {
	out := new(MathResponse)
	err := c.cc.Invoke(ctx, "/model.MyMathService/Mod", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MyMathServiceServer is the server API for MyMathService service.
type MyMathServiceServer interface {
	Add(context.Context, *MathRequest) (*MathResponse, error)
	Sub(context.Context, *MathRequest) (*MathResponse, error)
	Mul(context.Context, *MathRequest) (*MathResponse, error)
	Div(context.Context, *MathRequest) (*MathResponse, error)
	Mod(context.Context, *MathRequest) (*MathResponse, error)
}

// UnimplementedMyMathServiceServer can be embedded to have forward compatible implementations.
type UnimplementedMyMathServiceServer struct {
}

func (*UnimplementedMyMathServiceServer) Add(ctx context.Context, req *MathRequest) (*MathResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Add not implemented")
}
func (*UnimplementedMyMathServiceServer) Sub(ctx context.Context, req *MathRequest) (*MathResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Sub not implemented")
}
func (*UnimplementedMyMathServiceServer) Mul(ctx context.Context, req *MathRequest) (*MathResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Mul not implemented")
}
func (*UnimplementedMyMathServiceServer) Div(ctx context.Context, req *MathRequest) (*MathResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Div not implemented")
}
func (*UnimplementedMyMathServiceServer) Mod(ctx context.Context, req *MathRequest) (*MathResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Mod not implemented")
}

func RegisterMyMathServiceServer(s *grpc.Server, srv MyMathServiceServer) {
	s.RegisterService(&_MyMathService_serviceDesc, srv)
}

func _MyMathService_Add_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MathRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MyMathServiceServer).Add(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/model.MyMathService/Add",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MyMathServiceServer).Add(ctx, req.(*MathRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MyMathService_Sub_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MathRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MyMathServiceServer).Sub(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/model.MyMathService/Sub",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MyMathServiceServer).Sub(ctx, req.(*MathRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MyMathService_Mul_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MathRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MyMathServiceServer).Mul(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/model.MyMathService/Mul",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MyMathServiceServer).Mul(ctx, req.(*MathRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MyMathService_Div_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MathRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MyMathServiceServer).Div(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/model.MyMathService/Div",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MyMathServiceServer).Div(ctx, req.(*MathRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MyMathService_Mod_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MathRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MyMathServiceServer).Mod(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/model.MyMathService/Mod",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MyMathServiceServer).Mod(ctx, req.(*MathRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _MyMathService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "model.MyMathService",
	HandlerType: (*MyMathServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Add",
			Handler:    _MyMathService_Add_Handler,
		},
		{
			MethodName: "Sub",
			Handler:    _MyMathService_Sub_Handler,
		},
		{
			MethodName: "Mul",
			Handler:    _MyMathService_Mul_Handler,
		},
		{
			MethodName: "Div",
			Handler:    _MyMathService_Div_Handler,
		},
		{
			MethodName: "Mod",
			Handler:    _MyMathService_Mod_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "messages.proto",
}

// DataServiceClient is the client API for DataService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type DataServiceClient interface {
	Random(ctx context.Context, in *RandomRequest, opts ...grpc.CallOption) (DataService_RandomClient, error)
	Sum(ctx context.Context, opts ...grpc.CallOption) (DataService_SumClient, error)
}

type dataServiceClient struct {
	cc *grpc.ClientConn
}

func NewDataServiceClient(cc *grpc.ClientConn) DataServiceClient {
	return &dataServiceClient{cc}
}

func (c *dataServiceClient) Random(ctx context.Context, in *RandomRequest, opts ...grpc.CallOption) (DataService_RandomClient, error) {
	stream, err := c.cc.NewStream(ctx, &_DataService_serviceDesc.Streams[0], "/model.DataService/Random", opts...)
	if err != nil {
		return nil, err
	}
	x := &dataServiceRandomClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type DataService_RandomClient interface {
	Recv() (*RandomResponse, error)
	grpc.ClientStream
}

type dataServiceRandomClient struct {
	grpc.ClientStream
}

func (x *dataServiceRandomClient) Recv() (*RandomResponse, error) {
	m := new(RandomResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *dataServiceClient) Sum(ctx context.Context, opts ...grpc.CallOption) (DataService_SumClient, error) {
	stream, err := c.cc.NewStream(ctx, &_DataService_serviceDesc.Streams[1], "/model.DataService/Sum", opts...)
	if err != nil {
		return nil, err
	}
	x := &dataServiceSumClient{stream}
	return x, nil
}

type DataService_SumClient interface {
	Send(*SumRequest) error
	CloseAndRecv() (*SumResponse, error)
	grpc.ClientStream
}

type dataServiceSumClient struct {
	grpc.ClientStream
}

func (x *dataServiceSumClient) Send(m *SumRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *dataServiceSumClient) CloseAndRecv() (*SumResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(SumResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// DataServiceServer is the server API for DataService service.
type DataServiceServer interface {
	Random(*RandomRequest, DataService_RandomServer) error
	Sum(DataService_SumServer) error
}

// UnimplementedDataServiceServer can be embedded to have forward compatible implementations.
type UnimplementedDataServiceServer struct {
}

func (*UnimplementedDataServiceServer) Random(req *RandomRequest, srv DataService_RandomServer) error {
	return status.Errorf(codes.Unimplemented, "method Random not implemented")
}
func (*UnimplementedDataServiceServer) Sum(srv DataService_SumServer) error {
	return status.Errorf(codes.Unimplemented, "method Sum not implemented")
}

func RegisterDataServiceServer(s *grpc.Server, srv DataServiceServer) {
	s.RegisterService(&_DataService_serviceDesc, srv)
}

func _DataService_Random_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(RandomRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(DataServiceServer).Random(m, &dataServiceRandomServer{stream})
}

type DataService_RandomServer interface {
	Send(*RandomResponse) error
	grpc.ServerStream
}

type dataServiceRandomServer struct {
	grpc.ServerStream
}

func (x *dataServiceRandomServer) Send(m *RandomResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _DataService_Sum_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(DataServiceServer).Sum(&dataServiceSumServer{stream})
}

type DataService_SumServer interface {
	SendAndClose(*SumResponse) error
	Recv() (*SumRequest, error)
	grpc.ServerStream
}

type dataServiceSumServer struct {
	grpc.ServerStream
}

func (x *dataServiceSumServer) SendAndClose(m *SumResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *dataServiceSumServer) Recv() (*SumRequest, error) {
	m := new(SumRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _DataService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "model.DataService",
	HandlerType: (*DataServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Random",
			Handler:       _DataService_Random_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "Sum",
			Handler:       _DataService_Sum_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "messages.proto",
}
