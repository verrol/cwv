// Code generated by protoc-gen-go. DO NOT EDIT.
// source: messages.proto

package model

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type BiOperReq struct {
	OperandA             int64    `protobuf:"varint,3,opt,name=OperandA,proto3" json:"OperandA,omitempty"`
	OperandB             int64    `protobuf:"varint,4,opt,name=OperandB,proto3" json:"OperandB,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *BiOperReq) Reset()         { *m = BiOperReq{} }
func (m *BiOperReq) String() string { return proto.CompactTextString(m) }
func (*BiOperReq) ProtoMessage()    {}
func (*BiOperReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_4dc296cbfe5ffcd5, []int{0}
}

func (m *BiOperReq) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_BiOperReq.Unmarshal(m, b)
}
func (m *BiOperReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_BiOperReq.Marshal(b, m, deterministic)
}
func (m *BiOperReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BiOperReq.Merge(m, src)
}
func (m *BiOperReq) XXX_Size() int {
	return xxx_messageInfo_BiOperReq.Size(m)
}
func (m *BiOperReq) XXX_DiscardUnknown() {
	xxx_messageInfo_BiOperReq.DiscardUnknown(m)
}

var xxx_messageInfo_BiOperReq proto.InternalMessageInfo

func (m *BiOperReq) GetOperandA() int64 {
	if m != nil {
		return m.OperandA
	}
	return 0
}

func (m *BiOperReq) GetOperandB() int64 {
	if m != nil {
		return m.OperandB
	}
	return 0
}

type BiOperesp struct {
	Result               int64    `protobuf:"varint,3,opt,name=Result,proto3" json:"Result,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *BiOperesp) Reset()         { *m = BiOperesp{} }
func (m *BiOperesp) String() string { return proto.CompactTextString(m) }
func (*BiOperesp) ProtoMessage()    {}
func (*BiOperesp) Descriptor() ([]byte, []int) {
	return fileDescriptor_4dc296cbfe5ffcd5, []int{1}
}

func (m *BiOperesp) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_BiOperesp.Unmarshal(m, b)
}
func (m *BiOperesp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_BiOperesp.Marshal(b, m, deterministic)
}
func (m *BiOperesp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BiOperesp.Merge(m, src)
}
func (m *BiOperesp) XXX_Size() int {
	return xxx_messageInfo_BiOperesp.Size(m)
}
func (m *BiOperesp) XXX_DiscardUnknown() {
	xxx_messageInfo_BiOperesp.DiscardUnknown(m)
}

var xxx_messageInfo_BiOperesp proto.InternalMessageInfo

func (m *BiOperesp) GetResult() int64 {
	if m != nil {
		return m.Result
	}
	return 0
}

func init() {
	proto.RegisterType((*BiOperReq)(nil), "model.BiOperReq")
	proto.RegisterType((*BiOperesp)(nil), "model.BiOperesp")
}

func init() { proto.RegisterFile("messages.proto", fileDescriptor_4dc296cbfe5ffcd5) }

var fileDescriptor_4dc296cbfe5ffcd5 = []byte{
	// 175 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0xcb, 0x4d, 0x2d, 0x2e,
	0x4e, 0x4c, 0x4f, 0x2d, 0xd6, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0xcd, 0xcd, 0x4f, 0x49,
	0xcd, 0x51, 0x72, 0xe6, 0xe2, 0x74, 0xca, 0xf4, 0x2f, 0x48, 0x2d, 0x0a, 0x4a, 0x2d, 0x14, 0x92,
	0xe2, 0xe2, 0x00, 0x31, 0x13, 0xf3, 0x52, 0x1c, 0x25, 0x98, 0x15, 0x18, 0x35, 0x98, 0x83, 0xe0,
	0x7c, 0x24, 0x39, 0x27, 0x09, 0x16, 0x14, 0x39, 0x27, 0x25, 0x65, 0x98, 0x21, 0xa9, 0xc5, 0x05,
	0x42, 0x62, 0x5c, 0x6c, 0x41, 0xa9, 0xc5, 0xa5, 0x39, 0x25, 0x50, 0x23, 0xa0, 0x3c, 0xa3, 0x17,
	0x8c, 0x5c, 0xfc, 0xbe, 0x89, 0x25, 0x19, 0x20, 0x75, 0xc1, 0xa9, 0x45, 0x65, 0x99, 0xc9, 0xa9,
	0x42, 0x9a, 0x5c, 0xcc, 0x8e, 0x29, 0x29, 0x42, 0x02, 0x7a, 0x60, 0xc7, 0xe8, 0xc1, 0x5d, 0x22,
	0x85, 0x2a, 0x02, 0x32, 0x56, 0x93, 0x8b, 0x39, 0xb8, 0x34, 0x89, 0x58, 0xa5, 0xbe, 0xa5, 0x39,
	0xc4, 0x2a, 0x75, 0xc9, 0x2c, 0x23, 0xda, 0xd4, 0x7c, 0xa2, 0xdc, 0x9a, 0xc4, 0x06, 0x0e, 0x62,
	0x63, 0x40, 0x00, 0x00, 0x00, 0xff, 0xff, 0x55, 0xd3, 0x66, 0xb2, 0x74, 0x01, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// MathOperServiceClient is the client API for MathOperService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type MathOperServiceClient interface {
	Add(ctx context.Context, in *BiOperReq, opts ...grpc.CallOption) (*BiOperesp, error)
	Sub(ctx context.Context, in *BiOperReq, opts ...grpc.CallOption) (*BiOperesp, error)
	Mul(ctx context.Context, in *BiOperReq, opts ...grpc.CallOption) (*BiOperesp, error)
	Div(ctx context.Context, in *BiOperReq, opts ...grpc.CallOption) (*BiOperesp, error)
	Mod(ctx context.Context, in *BiOperReq, opts ...grpc.CallOption) (*BiOperesp, error)
}

type mathOperServiceClient struct {
	cc *grpc.ClientConn
}

func NewMathOperServiceClient(cc *grpc.ClientConn) MathOperServiceClient {
	return &mathOperServiceClient{cc}
}

func (c *mathOperServiceClient) Add(ctx context.Context, in *BiOperReq, opts ...grpc.CallOption) (*BiOperesp, error) {
	out := new(BiOperesp)
	err := c.cc.Invoke(ctx, "/model.MathOperService/Add", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mathOperServiceClient) Sub(ctx context.Context, in *BiOperReq, opts ...grpc.CallOption) (*BiOperesp, error) {
	out := new(BiOperesp)
	err := c.cc.Invoke(ctx, "/model.MathOperService/Sub", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mathOperServiceClient) Mul(ctx context.Context, in *BiOperReq, opts ...grpc.CallOption) (*BiOperesp, error) {
	out := new(BiOperesp)
	err := c.cc.Invoke(ctx, "/model.MathOperService/Mul", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mathOperServiceClient) Div(ctx context.Context, in *BiOperReq, opts ...grpc.CallOption) (*BiOperesp, error) {
	out := new(BiOperesp)
	err := c.cc.Invoke(ctx, "/model.MathOperService/Div", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mathOperServiceClient) Mod(ctx context.Context, in *BiOperReq, opts ...grpc.CallOption) (*BiOperesp, error) {
	out := new(BiOperesp)
	err := c.cc.Invoke(ctx, "/model.MathOperService/Mod", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MathOperServiceServer is the server API for MathOperService service.
type MathOperServiceServer interface {
	Add(context.Context, *BiOperReq) (*BiOperesp, error)
	Sub(context.Context, *BiOperReq) (*BiOperesp, error)
	Mul(context.Context, *BiOperReq) (*BiOperesp, error)
	Div(context.Context, *BiOperReq) (*BiOperesp, error)
	Mod(context.Context, *BiOperReq) (*BiOperesp, error)
}

// UnimplementedMathOperServiceServer can be embedded to have forward compatible implementations.
type UnimplementedMathOperServiceServer struct {
}

func (*UnimplementedMathOperServiceServer) Add(ctx context.Context, req *BiOperReq) (*BiOperesp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Add not implemented")
}
func (*UnimplementedMathOperServiceServer) Sub(ctx context.Context, req *BiOperReq) (*BiOperesp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Sub not implemented")
}
func (*UnimplementedMathOperServiceServer) Mul(ctx context.Context, req *BiOperReq) (*BiOperesp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Mul not implemented")
}
func (*UnimplementedMathOperServiceServer) Div(ctx context.Context, req *BiOperReq) (*BiOperesp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Div not implemented")
}
func (*UnimplementedMathOperServiceServer) Mod(ctx context.Context, req *BiOperReq) (*BiOperesp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Mod not implemented")
}

func RegisterMathOperServiceServer(s *grpc.Server, srv MathOperServiceServer) {
	s.RegisterService(&_MathOperService_serviceDesc, srv)
}

func _MathOperService_Add_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BiOperReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MathOperServiceServer).Add(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/model.MathOperService/Add",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MathOperServiceServer).Add(ctx, req.(*BiOperReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _MathOperService_Sub_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BiOperReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MathOperServiceServer).Sub(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/model.MathOperService/Sub",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MathOperServiceServer).Sub(ctx, req.(*BiOperReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _MathOperService_Mul_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BiOperReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MathOperServiceServer).Mul(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/model.MathOperService/Mul",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MathOperServiceServer).Mul(ctx, req.(*BiOperReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _MathOperService_Div_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BiOperReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MathOperServiceServer).Div(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/model.MathOperService/Div",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MathOperServiceServer).Div(ctx, req.(*BiOperReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _MathOperService_Mod_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BiOperReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MathOperServiceServer).Mod(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/model.MathOperService/Mod",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MathOperServiceServer).Mod(ctx, req.(*BiOperReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _MathOperService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "model.MathOperService",
	HandlerType: (*MathOperServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Add",
			Handler:    _MathOperService_Add_Handler,
		},
		{
			MethodName: "Sub",
			Handler:    _MathOperService_Sub_Handler,
		},
		{
			MethodName: "Mul",
			Handler:    _MathOperService_Mul_Handler,
		},
		{
			MethodName: "Div",
			Handler:    _MathOperService_Div_Handler,
		},
		{
			MethodName: "Mod",
			Handler:    _MathOperService_Mod_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "messages.proto",
}
