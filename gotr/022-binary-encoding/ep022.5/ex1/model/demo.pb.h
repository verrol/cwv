// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: demo.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_demo_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_demo_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3010000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3010000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/map.h>  // IWYU pragma: export
#include <google/protobuf/map_entry.h>
#include <google/protobuf/map_field_inl.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_demo_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_demo_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[2]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_demo_2eproto;
namespace model {
class SearchReq;
class SearchReqDefaultTypeInternal;
extern SearchReqDefaultTypeInternal _SearchReq_default_instance_;
class SearchReq_ParamsEntry_DoNotUse;
class SearchReq_ParamsEntry_DoNotUseDefaultTypeInternal;
extern SearchReq_ParamsEntry_DoNotUseDefaultTypeInternal _SearchReq_ParamsEntry_DoNotUse_default_instance_;
}  // namespace model
PROTOBUF_NAMESPACE_OPEN
template<> ::model::SearchReq* Arena::CreateMaybeMessage<::model::SearchReq>(Arena*);
template<> ::model::SearchReq_ParamsEntry_DoNotUse* Arena::CreateMaybeMessage<::model::SearchReq_ParamsEntry_DoNotUse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace model {

// ===================================================================

class SearchReq_ParamsEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<SearchReq_ParamsEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    0 > {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<SearchReq_ParamsEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    0 > SuperType;
  SearchReq_ParamsEntry_DoNotUse();
  SearchReq_ParamsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const SearchReq_ParamsEntry_DoNotUse& other);
  static const SearchReq_ParamsEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const SearchReq_ParamsEntry_DoNotUse*>(&_SearchReq_ParamsEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), s->size(), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "model.SearchReq.ParamsEntry.key");
 }
  static bool ValidateValue(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), s->size(), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "model.SearchReq.ParamsEntry.value");
 }
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& other) final;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_demo_2eproto);
    return ::descriptor_table_demo_2eproto.file_level_metadata[0];
  }

  public:
};

// -------------------------------------------------------------------

class SearchReq :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:model.SearchReq) */ {
 public:
  SearchReq();
  virtual ~SearchReq();

  SearchReq(const SearchReq& from);
  SearchReq(SearchReq&& from) noexcept
    : SearchReq() {
    *this = ::std::move(from);
  }

  inline SearchReq& operator=(const SearchReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline SearchReq& operator=(SearchReq&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SearchReq& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SearchReq* internal_default_instance() {
    return reinterpret_cast<const SearchReq*>(
               &_SearchReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(SearchReq& a, SearchReq& b) {
    a.Swap(&b);
  }
  inline void Swap(SearchReq* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SearchReq* New() const final {
    return CreateMaybeMessage<SearchReq>(nullptr);
  }

  SearchReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SearchReq>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SearchReq& from);
  void MergeFrom(const SearchReq& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SearchReq* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "model.SearchReq";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_demo_2eproto);
    return ::descriptor_table_demo_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kParamsFieldNumber = 2,
    kQFieldNumber = 1,
  };
  // map<string, string> params = 2;
  int params_size() const;
  private:
  int _internal_params_size() const;
  public:
  void clear_params();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      _internal_params() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      _internal_mutable_params();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      params() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      mutable_params();

  // string q = 1;
  void clear_q();
  const std::string& q() const;
  void set_q(const std::string& value);
  void set_q(std::string&& value);
  void set_q(const char* value);
  void set_q(const char* value, size_t size);
  std::string* mutable_q();
  std::string* release_q();
  void set_allocated_q(std::string* q);
  private:
  const std::string& _internal_q() const;
  void _internal_set_q(const std::string& value);
  std::string* _internal_mutable_q();
  public:

  // @@protoc_insertion_point(class_scope:model.SearchReq)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      SearchReq_ParamsEntry_DoNotUse,
      std::string, std::string,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      0 > params_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr q_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_demo_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// SearchReq

// string q = 1;
inline void SearchReq::clear_q() {
  q_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& SearchReq::q() const {
  // @@protoc_insertion_point(field_get:model.SearchReq.q)
  return _internal_q();
}
inline void SearchReq::set_q(const std::string& value) {
  _internal_set_q(value);
  // @@protoc_insertion_point(field_set:model.SearchReq.q)
}
inline std::string* SearchReq::mutable_q() {
  // @@protoc_insertion_point(field_mutable:model.SearchReq.q)
  return _internal_mutable_q();
}
inline const std::string& SearchReq::_internal_q() const {
  return q_.GetNoArena();
}
inline void SearchReq::_internal_set_q(const std::string& value) {
  
  q_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void SearchReq::set_q(std::string&& value) {
  
  q_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:model.SearchReq.q)
}
inline void SearchReq::set_q(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  q_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:model.SearchReq.q)
}
inline void SearchReq::set_q(const char* value, size_t size) {
  
  q_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:model.SearchReq.q)
}
inline std::string* SearchReq::_internal_mutable_q() {
  
  return q_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* SearchReq::release_q() {
  // @@protoc_insertion_point(field_release:model.SearchReq.q)
  
  return q_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void SearchReq::set_allocated_q(std::string* q) {
  if (q != nullptr) {
    
  } else {
    
  }
  q_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), q);
  // @@protoc_insertion_point(field_set_allocated:model.SearchReq.q)
}

// map<string, string> params = 2;
inline int SearchReq::_internal_params_size() const {
  return params_.size();
}
inline int SearchReq::params_size() const {
  return _internal_params_size();
}
inline void SearchReq::clear_params() {
  params_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
SearchReq::_internal_params() const {
  return params_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
SearchReq::params() const {
  // @@protoc_insertion_point(field_map:model.SearchReq.params)
  return _internal_params();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
SearchReq::_internal_mutable_params() {
  return params_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
SearchReq::mutable_params() {
  // @@protoc_insertion_point(field_mutable_map:model.SearchReq.params)
  return _internal_mutable_params();
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace model

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_demo_2eproto
